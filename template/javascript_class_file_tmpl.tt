
var Stark = Stark || {};
Stark.Industries = Stark.Industries || {};
Stark.Industries.ArcReactor = Stark.Industries.ArcReactor || {};
Stark.Industries.ArcReactor.Study = Stark.Industries.ArcReactor.Study || {};

Stark.Industries.ArcReactor.Study.Record = function (){

    /* Private data members */
    this.logger = Stark.Industries.Logger.getInstance();

    this.IS_DEBUG_MODE = false;

    this.id = null;
    this.projectId = null;
    this.studyCode = null;
    this.product = null;
    this.project = null;
    this.anticipatedDatatypesList = [];
    this.anticipatedDatatypesCount = 0;

    /* This is to retain*/
    this.previousAnticipatedDatatypesList = [];
    this.previousAnticipatedDatatypesCount = 0;
};

Stark.Industries.ArcReactor.Study.Record.prototype.setId = function (i){
    
    if (!defined(i)){
        throw new Error ("[Stark.Industries.ArcReactor.Study.Record.setId()] - id was not defined");
    }
    else {
        this.id = i;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.getId = function (){

    return this.id;
};

Stark.Industries.ArcReactor.Study.Record.prototype.setProjectId = function (i){
    
    if (!defined(i)){
        throw new Error ("project ID was not defined");
    }
    else {
        this.projectId = i;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.getProjectId = function (){

    return this.projectId;
};

Stark.Industries.ArcReactor.Study.Record.prototype.setStudyCode = function (code){

    if (!defined(code)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.setStudyCode()] - study code was not defined");
    }
    else {
        this.studyCode = code;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.getStudyCode = function (){

    return this.studyCode;
};

Stark.Industries.ArcReactor.Study.Record.prototype.setProduct = function (prod){

    if (!defined(prod)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.setProduct()] - prod was not defined");
    }
    else {
        this.product = prod;
    }
};
 
Stark.Industries.ArcReactor.Study.Record.prototype.getProduct = function (){
    
    return this.product;
};
 
Stark.Industries.ArcReactor.Study.Record.prototype.setProject = function (proj){

    if (!defined(proj)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.setProject()] - project was not defined");
    }
    else {
        this.project = proj;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.getAnticipatedDatatypesList = function (){
    
    return this.anticipatedDatatypesList;
};

Stark.Industries.ArcReactor.Study.Record.prototype.setAnticipatedDatatypesList = function (list){

    if (!defined(list)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.setAnticipatedDatatypesList()] - list was not defined");
    }
    else {
        this.anticipatedDatatypesList = list;
        this.anticipatedDatatypesCount = list.length;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.addAnticipatedDatatype = function (antiType){

    if (!defined(antiType)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.addAnticipatedDatatype()] - anticipated datatype was not defined");
    }
    else {
        this.anticipatedDatatypesList.push(antiType);
        this.anticipatedDatatypesCount++;
    }
};


Stark.Industries.ArcReactor.Study.Record.prototype.removeAnticipatedDatatypeById = function (id){

    if (!defined(id)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.removeAnticipatedDatatype()] - id was not defined");
    }
    else {
        
        var cleanedList = this.anticipatedDatatypesList;

        var length = cleanedList.length;

        for (var i=0; i < length ; i++){

            var adt = this.anticipatedDatatypesList[i];
            var aid = adt.getId();
            if (aid == id){
                this.anticipatedDatatypesCount--;
                continue;
            }
            else {
                cleanedList.push(adt);
            }
        }

        this.anticipatedDatatypesList = cleanedList;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.removeAllNewAnticipatedDatatypes = function (){

    this.anticipatedDatatypesList = [];
    this.anticipatedDatatypesCount = 0;
};

 
Stark.Industries.ArcReactor.Study.Record.prototype.getAnticipatedDatatypeCount = function (){

    return this.anticipatedDatatypesCount;
};

Stark.Industries.ArcReactor.Study.Record.prototype.convertAllAnticipatedDatatypesFromCurrentToPrevious = function (){

    /*
      For now, this method will simple transfer all anticipated datatypes 
      from the current list to the previous list.
    */

    if (this.anticipatedDatatypesCount > 0){

        var list = this.anticipatedDatatypesList;
        var length = list.length;

        for (var i =0 ; i < length ; i++){
            
            var adt = list[i];
            this.anticipatedDatatypesCount--;
            this.previousAnticipatedDatatypesCount++;
            this.previousAnticipatedDatatypesList.push(adt);
        }

        /* Re-initialize the current anticipated datatype variables */
        this.anticipatedDatatypesList = [];
        this.anticipatedDatatypesCount = 0;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.getPreviousAnticipatedDatatypesList = function (){
    
    return this.previousAnticipatedDatatypesList;
};

Stark.Industries.ArcReactor.Study.Record.prototype.setPreviousAnticipatedDatatypesList = function (list){

    if (!defined(list)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.setPreviousAnticipatedDatatypesList()] - list was not defined");
    }
    else {
        this.previousAnticipatedDatatypesList = list;
        this.previousAnticipatedDatatypesCount = list.length;
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.addPreviousAnticipatedDatatype = function (antiType){

    if (!defined(antiType)){
        throw new Error("[Stark.Industries.ArcReactor.Study.Record.addPreviousAnticipatedDatatype()] - anticipated datatype was not defined");
    }
    else {
        this.previousAnticipatedDatatypesList.push(antiType);
        this.previousAnticipatedDatatypesCount++;
        if (console) { console.log("Added anticipated datatype " + antiType ); }
    }
};

Stark.Industries.ArcReactor.Study.Record.prototype.getPreviousAnticipatedDatatypesCount = function (){

    return this.previousAnticipatedDatatypesCount;
};
